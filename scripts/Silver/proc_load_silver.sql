/*
======================================
STORED PROCEDURE : LOAD SILVER LAYER( BRONZE -> SILVER)
=======================================
SCRIPT PURPOSE :
  THIS STORED PROCEDURE PERFORMS ETL(EXTRACT,TRANSFORM,LOAD) PROCESS TO 
  POPLULATE 'SILVER' SCHEMA TABLES FROM THE 'BRONZE' SCHEMA.
ACTIONS PERFOMED :
  - TRUNCATES SILVER TABLES.
  - INSERTS TRANSFORMED AND CLEANSED DATA FROM BRONZE INTO SILVER TABLES.

PARAMETERS :
  NONE.
  THIS STORED PROCEDURE DOES NOT ACCEPT ANY PARAMETERS OR RETURN ANY VALUES 

USAGE EXAMPLE :
  CALL SILVER.LOAD_SILVER()
=============================================

*/
CREATE OR REPLACE PROCEDURE SILVER.LOAD_SILVER()
LANGUAGE plpgsql
AS $$
DECLARE 
	START_TIME TIMESTAMP;
	END_TIME TIMESTAMP;
	START_FULL_LOAD TIMESTAMP;
	END_FULL_LOAD TIMESTAMP;
BEGIN 
	START_FULL_LOAD := CURRENT_TIMESTAMP;
	RAISE NOTICE '=========================================';
	RAISE NOTICE 'LOADING SILVER LAYER';
	RAISE NOTICE '=========================================';
	

	RAISE NOTICE '=========================================';
	RAISE NOTICE 'INSERTING INTO CRM TABLES';
	RAISE NOTICE '=========================================';

	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.CRM_CUST_INFO';
	TRUNCATE TABLE SILVER.CRM_CUST_INFO;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.CRM_CUST_INFO';
	INSERT INTO SILVER.CRM_CUST_INFO(
		CST_ID,
		CST_KEY,
		CST_FIRSTNAME,
		CST_LASTNAME,
		CST_MARTIAL_STATUS,
		CST_GNDR,
		CST_CREATE_DATE
	)
	
	SELECT 
		CST_ID,
		CST_KEY,
		TRIM(CST_FIRSTNAME) AS CST_FIRSTNAME,
		TRIM(CST_LASTNAME) AS CST_LASTNAME,
		CASE 
			WHEN UPPER(TRIM(CST_MARTIAL_STATUS)) = 'S' THEN 'SINGLE'
			WHEN UPPER(TRIM(CST_MARTIAL_STATUS)) = 'M' THEN 'MARRIED'
			ELSE 'N/A'
		END AS CST_MARTIAL_STATUS,
		CASE 
			WHEN UPPER(TRIM(CST_GNDR)) = 'F' THEN 'FEMALE'
			WHEN UPPER(TRIM(CST_GNDR)) = 'M' THEN 'MALE'
			ELSE 'N/A'
		END AS CST_GNDR,
		CST_CREATE_DATE
	FROM (
	SELECT *,
		ROW_NUMBER() OVER(PARTITION BY CST_ID ORDER BY CST_CREATE_DATE) AS FLAG_LAST
	FROM BRONZE.CRM_CUST_INFO
	)
	WHERE FLAG_LAST =1;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';


	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.CRM_PRD_INFO';
	TRUNCATE TABLE SILVER.CRM_PRD_INFO;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.CRM_PRD_INFO';
	INSERT INTO SILVER.CRM_PRD_INFO (
		PRD_ID,
		CAT_ID,
		PRD_KEY,
		PRD_NM,
		PRD_COST,
		PRD_LINE,
		PRD_START_DT,
		PRD_END_DT
	)
	SELECT 
		PRD_ID,
		REPLACE(SUBSTRING(PRD_KEY,1,5),'-','_' )AS CAT_ID,
		SUBSTRING(PRD_KEY,7,LENGTH(PRD_KEY)) AS PRD_KEY,
		PRD_NM,
		COALESCE(PRD_COST, 0) AS PRD_COST,
		CASE 
			WHEN UPPER(TRIM(PRD_LINE)) = 'M' THEN 'MOUNTAIN'
			WHEN UPPER(TRIM(PRD_LINE)) = 'R' THEN 'ROAD'
			WHEN UPPER(TRIM(PRD_LINE)) = 'S' THEN 'OTHER SALES'
			WHEN UPPER(TRIM(PRD_LINE)) = 'T' THEN 'TOURING'
			ELSE 'N/A' 
		END AS PRD_LINE,
		PRD_START_DT,
		LEAD(PRD_START_DT) OVER(PARTITION BY PRD_KEY ORDER BY PRD_START_DT) -1 AS PRD_END_DT
	FROM BRONZE.CRM_PRD_INFO;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';

	-- THIRD TABLE 
	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.CRM_SALES_DETAILS';
	TRUNCATE TABLE SILVER.CRM_SALES_DETAILS;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.CRM_SALES_DETAILS';
	INSERT INTO SILVER.CRM_SALES_DETAILS(
		SLS_ORD_NUM,
		SLS_PRD_KEY,
		SLS_CUST_ID,
		SLS_ORDER_DT,
		SLS_SHIP_DT,
		SLS_DUE_DT,
		SLS_SALES,
		SLS_QUANTITY,
		SLS_PRICE
	)
	
	SELECT 
		SLS_ORD_NUM,
		SLS_PRD_KEY,
		SLS_CUST_ID,
		CASE WHEN SLS_ORDER_DT = 0 OR LENGTH(CAST(SLS_ORDER_DT AS TEXT)) != 8 THEN NULL
				ELSE TO_DATE(CAST(SLS_ORDER_DT AS TEXT) , 'YYYYMMDD')
		END AS SLS_ORDER_DT,
		CASE WHEN SLS_SHIP_DT = 0 OR LENGTH(CAST(SLS_SHIP_DT AS TEXT)) != 8 THEN NULL
				ELSE TO_DATE(CAST(SLS_SHIP_DT AS TEXT) , 'YYYYMMDD')
		END AS SLS_SHIP_DT,
		CASE WHEN SLS_DUE_DT = 0 OR LENGTH(CAST(SLS_DUE_DT AS TEXT)) != 8 THEN NULL
				ELSE TO_DATE(CAST(SLS_DUE_DT AS TEXT) , 'YYYYMMDD')
		END AS SLS_DUE_DT,
	
		CASE 
			WHEN SLS_SALES IS NULL OR SLS_SALES<= 0 OR SLS_SALES != SLS_QUANTITY * ABS(SLS_PRICE)
			THEN SLS_QUANTITY * ABS(SLS_PRICE)
			ELSE SLS_SALES
		END AS SLS_SALES,
		SLS_QUANTITY,
		CASE 
			WHEN SLS_PRICE IS NULL OR SLS_PRICE<= 0
			THEN SLS_SALES / NULLIF(SLS_QUANTITY,0)
			ELSE SLS_PRICE
		END AS SLS_PRICE
	FROM BRONZE.CRM_SALES_DETAILS ;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';
	
		-- TABLE FOUR 
	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.ERP_CUST_AZ12';
	TRUNCATE TABLE SILVER.ERP_CUST_AZ12;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.ERP_CUST_AZ12';
	INSERT INTO SILVER.ERP_CUST_AZ12(
		CID,
		BDATE,
		GEN
	)
	SELECT 
		CASE 
			WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4, LENGTH(CID))
		END AS CID,
		CASE 
			WHEN BDATE > CURRENT_DATE THEN NULL
			ELSE BDATE
		END AS BDATE,
		CASE 
			WHEN UPPER(TRIM(GEN)) IN ('F','FEMALE') THEN 'FEMALE'
			WHEN UPPER(TRIM(GEN)) IN('M','MALE') THEN 'MALE'
			ELSE 'N/A'
		END AS GEN
	FROM BRONZE.ERP_CUST_AZ12;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';
	
	-- FIVTH TABLE
	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.ERP_LOC_A101';
	TRUNCATE TABLE SILVER.ERP_LOC_A101;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.ERP_LOC_A101';
	INSERT INTO SILVER.ERP_LOC_A101(
		CID,
		CNTRY
	)
	
	SELECT 
		REPLACE(CID,'-','') AS CID ,
		CASE 
			WHEN UPPER(TRIM(CNTRY)) = 'DE' THEN 'GERMANY'
			WHEN UPPER(TRIM(CNTRY)) IN ('US','USA') THEN 'UNITED STATES'
			WHEN UPPER(TRIM(CNTRY)) = '' OR CNTRY IS NULL THEN 'N/A'
			ELSE TRIM(CNTRY)
		END AS CNTRY
	FROM BRONZE.ERP_LOC_A101;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';
	
	
	-- SIXTH TABLE 
	RAISE NOTICE '------------------------------------------';
	START_TIME := CURRENT_TIMESTAMP;
	
	RAISE NOTICE '>>TRUNCATING TABLE SILVER.ERP_PX_CAT_G1V2';
	TRUNCATE TABLE SILVER.ERP_PX_CAT_G1V2;
	RAISE NOTICE '>>INSERTING DATA INTO SILVER.ERP_PX_CAT_G1V2';
	INSERT INTO SILVER.ERP_PX_CAT_G1V2
	(
		ID,
		CAT,
		SUBCAT,
		MAINTENANCE
	)
	SELECT 
		ID,
		CAT,
		SUBCAT,
		MAINTENANCE
	FROM BRONZE.ERP_PX_CAT_G1V2;

	END_TIME := CURRENT_TIMESTAMP;
	RAISE NOTICE 'LOAD DURATION : %', AGE(START_TIME,END_TIME);
	RAISE NOTICE '---------------------------------------------';

	END_FULL_LOAD := CURRENT_TIMESTAMP;
	RAISE NOTICE '============================================';
	RAISE NOTICE '>>FULL LOAD DURATION %' , AGE(START_FULL_LOAD,END_FULL_LOAD);
	RAISE NOTICE '============================================';

EXCEPTION 
	WHEN OTHERS THEN
		RAISE NOTICE '=============================================';
		RAISE NOTICE '>> AN UNWANTED ERROR OCCURED ';
		RAISE NOTICE '=============================================';
	
END ;
$$

CALL SILVER.LOAD_SILVER()

